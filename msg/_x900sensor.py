# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pp/x900sensor.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class x900sensor(genpy.Message):
  _md5sum = "5625d88db727974c5647ed8ea63cb051"
  _type = "pp/x900sensor"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#lw_vel,rw_vel:left_wheel and right_wheel volcity in m/s
float32 lw_vel
float32 rw_vel

# angel and angle velocity in degress/s
float32 angle
float32 angle_v

#left and right wheel current in mA
float32 lw_crt
float32 rw_crt

#infrated detect value,0~65535
int16 left_wall
int16 right_wall
#left right front obs value,0~65535
int16 l_obs
int16 f_obs
int16 r_obs

# bumper value:1 hit,0 not hit
bool rbumper
bool lbumper

# ir controler signal
uint8 ir_ctrl

#c_stub: charge stub signal,bit7 forward,6 left,5 right,4 max,3 clean,2 go home,1 random,0 spot
uint32 c_stub

# on board key ,value:0 no press, 1 press
uint8 key

#c_s: charge status, 0: Not on charger stub, 1: On charger stub and charging, 2: On charger stub but not charging.
uint8 c_s

#w_tank: water tank status,1:set,0:not set
bool w_tank

#batv: battery voltage,in xx.xx v
uint16 batv

#right left and front cliff value,0~65535
int16 rcliff
int16 lcliff
int16 fcliff

# left,right, main brush and vccum over current value,1:over current, 0:no over current
bool lbrush_oc
bool mbrush_oc
bool rbrush_oc
bool vcum_oc

# Acceleration for x, y, z
float32 x_acc
float32 y_acc
float32 z_acc

# omni-wheel 0--10000
int16 omni_wheel
#visual wall 
int16 visual_wall
#gyroscope dynamic ragulate
int8 gyro_dymc

#plan, true: robot got a plan, false: nothing had happened
bool plan
"""
  __slots__ = ['lw_vel','rw_vel','angle','angle_v','lw_crt','rw_crt','left_wall','right_wall','l_obs','f_obs','r_obs','rbumper','lbumper','ir_ctrl','c_stub','key','c_s','w_tank','batv','rcliff','lcliff','fcliff','lbrush_oc','mbrush_oc','rbrush_oc','vcum_oc','x_acc','y_acc','z_acc','omni_wheel','visual_wall','gyro_dymc','plan']
  _slot_types = ['float32','float32','float32','float32','float32','float32','int16','int16','int16','int16','int16','bool','bool','uint8','uint32','uint8','uint8','bool','uint16','int16','int16','int16','bool','bool','bool','bool','float32','float32','float32','int16','int16','int8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lw_vel,rw_vel,angle,angle_v,lw_crt,rw_crt,left_wall,right_wall,l_obs,f_obs,r_obs,rbumper,lbumper,ir_ctrl,c_stub,key,c_s,w_tank,batv,rcliff,lcliff,fcliff,lbrush_oc,mbrush_oc,rbrush_oc,vcum_oc,x_acc,y_acc,z_acc,omni_wheel,visual_wall,gyro_dymc,plan

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(x900sensor, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lw_vel is None:
        self.lw_vel = 0.
      if self.rw_vel is None:
        self.rw_vel = 0.
      if self.angle is None:
        self.angle = 0.
      if self.angle_v is None:
        self.angle_v = 0.
      if self.lw_crt is None:
        self.lw_crt = 0.
      if self.rw_crt is None:
        self.rw_crt = 0.
      if self.left_wall is None:
        self.left_wall = 0
      if self.right_wall is None:
        self.right_wall = 0
      if self.l_obs is None:
        self.l_obs = 0
      if self.f_obs is None:
        self.f_obs = 0
      if self.r_obs is None:
        self.r_obs = 0
      if self.rbumper is None:
        self.rbumper = False
      if self.lbumper is None:
        self.lbumper = False
      if self.ir_ctrl is None:
        self.ir_ctrl = 0
      if self.c_stub is None:
        self.c_stub = 0
      if self.key is None:
        self.key = 0
      if self.c_s is None:
        self.c_s = 0
      if self.w_tank is None:
        self.w_tank = False
      if self.batv is None:
        self.batv = 0
      if self.rcliff is None:
        self.rcliff = 0
      if self.lcliff is None:
        self.lcliff = 0
      if self.fcliff is None:
        self.fcliff = 0
      if self.lbrush_oc is None:
        self.lbrush_oc = False
      if self.mbrush_oc is None:
        self.mbrush_oc = False
      if self.rbrush_oc is None:
        self.rbrush_oc = False
      if self.vcum_oc is None:
        self.vcum_oc = False
      if self.x_acc is None:
        self.x_acc = 0.
      if self.y_acc is None:
        self.y_acc = 0.
      if self.z_acc is None:
        self.z_acc = 0.
      if self.omni_wheel is None:
        self.omni_wheel = 0
      if self.visual_wall is None:
        self.visual_wall = 0
      if self.gyro_dymc is None:
        self.gyro_dymc = 0
      if self.plan is None:
        self.plan = False
    else:
      self.lw_vel = 0.
      self.rw_vel = 0.
      self.angle = 0.
      self.angle_v = 0.
      self.lw_crt = 0.
      self.rw_crt = 0.
      self.left_wall = 0
      self.right_wall = 0
      self.l_obs = 0
      self.f_obs = 0
      self.r_obs = 0
      self.rbumper = False
      self.lbumper = False
      self.ir_ctrl = 0
      self.c_stub = 0
      self.key = 0
      self.c_s = 0
      self.w_tank = False
      self.batv = 0
      self.rcliff = 0
      self.lcliff = 0
      self.fcliff = 0
      self.lbrush_oc = False
      self.mbrush_oc = False
      self.rbrush_oc = False
      self.vcum_oc = False
      self.x_acc = 0.
      self.y_acc = 0.
      self.z_acc = 0.
      self.omni_wheel = 0
      self.visual_wall = 0
      self.gyro_dymc = 0
      self.plan = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6f5h3BI3BH3h4B3f2hbB.pack(_x.lw_vel, _x.rw_vel, _x.angle, _x.angle_v, _x.lw_crt, _x.rw_crt, _x.left_wall, _x.right_wall, _x.l_obs, _x.f_obs, _x.r_obs, _x.rbumper, _x.lbumper, _x.ir_ctrl, _x.c_stub, _x.key, _x.c_s, _x.w_tank, _x.batv, _x.rcliff, _x.lcliff, _x.fcliff, _x.lbrush_oc, _x.mbrush_oc, _x.rbrush_oc, _x.vcum_oc, _x.x_acc, _x.y_acc, _x.z_acc, _x.omni_wheel, _x.visual_wall, _x.gyro_dymc, _x.plan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 74
      (_x.lw_vel, _x.rw_vel, _x.angle, _x.angle_v, _x.lw_crt, _x.rw_crt, _x.left_wall, _x.right_wall, _x.l_obs, _x.f_obs, _x.r_obs, _x.rbumper, _x.lbumper, _x.ir_ctrl, _x.c_stub, _x.key, _x.c_s, _x.w_tank, _x.batv, _x.rcliff, _x.lcliff, _x.fcliff, _x.lbrush_oc, _x.mbrush_oc, _x.rbrush_oc, _x.vcum_oc, _x.x_acc, _x.y_acc, _x.z_acc, _x.omni_wheel, _x.visual_wall, _x.gyro_dymc, _x.plan,) = _struct_6f5h3BI3BH3h4B3f2hbB.unpack(str[start:end])
      self.rbumper = bool(self.rbumper)
      self.lbumper = bool(self.lbumper)
      self.w_tank = bool(self.w_tank)
      self.lbrush_oc = bool(self.lbrush_oc)
      self.mbrush_oc = bool(self.mbrush_oc)
      self.rbrush_oc = bool(self.rbrush_oc)
      self.vcum_oc = bool(self.vcum_oc)
      self.plan = bool(self.plan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6f5h3BI3BH3h4B3f2hbB.pack(_x.lw_vel, _x.rw_vel, _x.angle, _x.angle_v, _x.lw_crt, _x.rw_crt, _x.left_wall, _x.right_wall, _x.l_obs, _x.f_obs, _x.r_obs, _x.rbumper, _x.lbumper, _x.ir_ctrl, _x.c_stub, _x.key, _x.c_s, _x.w_tank, _x.batv, _x.rcliff, _x.lcliff, _x.fcliff, _x.lbrush_oc, _x.mbrush_oc, _x.rbrush_oc, _x.vcum_oc, _x.x_acc, _x.y_acc, _x.z_acc, _x.omni_wheel, _x.visual_wall, _x.gyro_dymc, _x.plan))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 74
      (_x.lw_vel, _x.rw_vel, _x.angle, _x.angle_v, _x.lw_crt, _x.rw_crt, _x.left_wall, _x.right_wall, _x.l_obs, _x.f_obs, _x.r_obs, _x.rbumper, _x.lbumper, _x.ir_ctrl, _x.c_stub, _x.key, _x.c_s, _x.w_tank, _x.batv, _x.rcliff, _x.lcliff, _x.fcliff, _x.lbrush_oc, _x.mbrush_oc, _x.rbrush_oc, _x.vcum_oc, _x.x_acc, _x.y_acc, _x.z_acc, _x.omni_wheel, _x.visual_wall, _x.gyro_dymc, _x.plan,) = _struct_6f5h3BI3BH3h4B3f2hbB.unpack(str[start:end])
      self.rbumper = bool(self.rbumper)
      self.lbumper = bool(self.lbumper)
      self.w_tank = bool(self.w_tank)
      self.lbrush_oc = bool(self.lbrush_oc)
      self.mbrush_oc = bool(self.mbrush_oc)
      self.rbrush_oc = bool(self.rbrush_oc)
      self.vcum_oc = bool(self.vcum_oc)
      self.plan = bool(self.plan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6f5h3BI3BH3h4B3f2hbB = struct.Struct("<6f5h3BI3BH3h4B3f2hbB")
